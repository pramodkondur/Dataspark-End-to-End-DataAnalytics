SQL Queries for the project

1) -- Query to segment customers based on age
SELECT 
    c.CustomerKey,
    TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) AS Age,
    CASE
        WHEN TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) BETWEEN 20 AND 29 THEN '20s'
        WHEN TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) BETWEEN 30 AND 39 THEN '30s'
        WHEN TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) BETWEEN 40 AND 49 THEN '40s'
        WHEN TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) BETWEEN 50 AND 59 THEN '50s'
        WHEN TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) BETWEEN 60 AND 69 THEN '60s'
        WHEN TIMESTAMPDIFF(YEAR, c.Birthday, CURDATE()) >= 70 THEN 'Over 70'
        ELSE 'Unknown'
    END AS AgeGroup
FROM 
    Customers c;

2) -- Query to segment customers based on frequency of orders
WITH CustomerOrders AS (
    SELECT 
        s.CustomerKey,
        COUNT(s.OrderNumber) AS OrderCount
    FROM 
        Sales s
    GROUP BY 
        s.CustomerKey
)
SELECT 
    c.CustomerKey,
    COALESCE(co.OrderCount, 0) AS OrderCount,
    CASE
        WHEN COALESCE(co.OrderCount, 0) > 10 THEN 'Loyal Customer'
        WHEN COALESCE(co.OrderCount, 0) BETWEEN 5 AND 10 THEN 'Periodic Buyer'
        WHEN COALESCE(co.OrderCount, 0) BETWEEN 1 AND 4 THEN 'VIP Customer'
        ELSE 'No Orders'
    END AS CustomerOrderingType
FROM 
    Customers c
LEFT JOIN
    CustomerOrders co ON c.CustomerKey = co.CustomerKey;

3) -- -- Query to calculate total revenue and profit for each customer
WITH CustomerRevenue AS (
    SELECT 
        s.CustomerKey,
        SUM(p.UnitPriceUSD * s.Quantity) AS TotalRevenue
	SUM((p.UnitPriceUSD - p.UnitCostUSD)* s.Quantity) As TotalProfit
    FROM 
        Sales s
    JOIN 
        Products p ON s.ProductKey = p.ProductKey
    GROUP BY 
        s.CustomerKey
)
SELECT 
    c.CustomerKey,
    COALESCE(cr.TotalRevenue, 0) AS TotalRevenue
    COALESCE(cr.TotalProfit, 0) AS TotalProfit	
FROM 
    Customers c
LEFT JOIN
    CustomerRevenue cr ON c.CustomerKey = cr.CustomerKey;


4) -- Query to calculate the age of each store
SELECT 
    StoreKey,
    OpenDate,
    TIMESTAMPDIFF(YEAR, OpenDate, CURDATE()) AS StoreAge
FROM 
    Stores;

5) --- Query to filter Stores with no orders
SELECT s.StoreKey
	FROM stores s
	LEFT JOIN Sales sa ON s.StoreKey = sa.StoreKey
	WHERE sa.StoreKey IS NULL;

6) --- Query to filter Products with no orders
SELECT *
	FROM Products
	WHERE ProductKey NOT IN (SELECT ProductKey FROM Sales);

7) -- Performance of different stores based on sales data
WITH SalesData AS (
    SELECT
        s.StoreKey,
        SUM(p.UnitPriceUSD * s.Quantity) AS TotalRevenue
	SUM((p.UnitPriceUSD - p.UnitCostUSD)* s.Quantity) As TotalProfit
    FROM
        sales s
    JOIN
        products p ON s.ProductKey = p.ProductKey
    GROUP BY
        s.StoreKey
)

SELECT
    s.StoreKey,
    TotalRevenue,
    TotalProfit
FROM
    SalesData s
JOIN
    stores st ON s.StoreKey = st.StoreKey
ORDER BY
    TotalRevenue DESC;

8) --- Performance based on Category
SELECT
        p.CategoryKey,
        SUM((pr.UnitPriceUSD - pr.UnitCostUSD) * s.Quantity) AS ProfitUSD,
        SUM((pr.UnitPriceUSD) * s.Quantity) AS RevenueUSD
    FROM
        Sales s
    JOIN
        Products pr ON s.ProductKey = pr.ProductKey
    JOIN
        Products p ON pr.CategoryKey = p.CategoryKey
    GROUP BY
        p.CategoryKey

9) --- Performance based on Subcategory
SELECT
        p.SubcategoryKey,
        SUM((pr.UnitPriceUSD - pr.UnitCostUSD) * s.Quantity) AS ProfitUSD,
        SUM((pr.UnitPriceUSD) * s.Quantity) AS RevenueUSD
    FROM
        Sales s
    JOIN
        Products pr ON s.ProductKey = pr.ProductKey
    JOIN
        Products p ON pr.CategoryKey = p.CategoryKey
    GROUP BY
        p.SubcategoryKey

10) --- Online Store number of customers, orders and revenue
SELECT
	StoreKey
        COUNT(DISTINCT s.CustomerKey) AS NumberOfCustomers,
        COUNT(s.OrderNumber) AS NumberOfOrders,
        SUM(p.UnitPriceUSD * s.Quantity) AS TotalRevenue
    FROM 
        Sales s
    JOIN 
        Product p ON s.ProductKey = p.ProductKey
    WHERE 
        s.StoreKey = 0
